generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id        String       @id @default(cuid())
  email     String       @unique
  username  String       @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userRoles UserRole[]  // Relation to UserRole
  tenants   TenantUser[] // Relation to TenantUser
  ident     Json?       // Adding the new Ident field as optional JSON
  applications Application[] // Relation to Application
  tenantRoleAssignments TenantUserRoleAssignment[]
}

model Tenant {
  id        String       @id @default(uuid())
  name      String
  created   DateTime     @default(now())
  updated   DateTime     @updatedAt
  details   String?
  users     TenantUser[] // Relation to TenantUser
  roles     TenantUserRole[] // Add this new relation
  roleAssignments TenantUserRoleAssignment[]
}

model Role {
  id        String     @id @default(uuid())
  name      String     @unique
  created   DateTime   @default(now())
  updated   DateTime   @updatedAt
  details   String?
  userRoles UserRole[] // Relation to UserRole
}

model UserRole {
  id              String           @id @default(uuid())
  roleId          String          // Foreign key to Role
  userId          String          // Foreign key to User
  name            String
  created         DateTime        @default(now())
  updated         DateTime        @updatedAt
  details         String?
  role            Role            @relation(fields: [roleId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  tenantUserRole  TenantUserRole  @relation(fields: [tenantUserRoleId], references: [id])
  tenantUserRoleId String         // Foreign key to TenantUserRole

  @@unique([userId, roleId]) // Prevents duplicate role assignments
}

model TenantUser {
  id        String   @id @default(uuid())
  tenantId  String   // Foreign key to Tenant
  userId    String   // Foreign key to User
  created   DateTime @default(now())
  updated   DateTime @updatedAt
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, tenantId]) // Prevents duplicate tenant assignments
}

model Application {
  id          String    @id @default(uuid())
  application String
  name        String
  details     String?
  metadata    Json?
  created     DateTime  @default(now())
  updated     DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model TenantUserRole {
  id        String     @id @default(uuid())
  name      String     
  created   DateTime   @default(now())
  updated   DateTime   @updatedAt
  details   String?
  tenantId  String    // Foreign key to Tenant
  tenant    Tenant    @relation(fields: [tenantId], references: [id])
  userRoles UserRole[] // Relation to UserRole
  assignments TenantUserRoleAssignment[]

  @@unique([name, tenantId]) // Ensures role names are unique within a tenant
}

model TenantUserRoleAssignment {
  id              String         @id @default(uuid())
  userId          String        // Foreign key to User
  tenantId        String        // Foreign key to Tenant
  tenantUserRoleId String       // Foreign key to TenantUserRole
  created         DateTime      @default(now())
  updated         DateTime      @updatedAt
  details         String?
  user            User          @relation(fields: [userId], references: [id])
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
  tenantUserRole  TenantUserRole @relation(fields: [tenantUserRoleId], references: [id])

  @@unique([userId, tenantId, tenantUserRoleId]) // Prevents duplicate role assignments within a tenant
}